version: '3'

services:
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/certs:/etc/nginx/certs
    ports:
      - '80:80'
      - '443:443'
    depends_on:
      - pong_project
    command: /bin/bash -c "rm -f /etc/nginx/sites-enabled/default && 
              rm -f /etc/nginx/sites-available/default && nginx -g 'daemon off;'"

  pong_project:
    build:
      context: ./Micro-Services/pong_project/
      dockerfile: Dockerfile
    environment:
      - HOST_IP=${HOST_IP}
    volumes:
      - ./Micro-Services/pong_project/:/app
    ports:
      - "8001:8000"
    networks:
      - pong_project
    depends_on:
      - pong_project_db
    restart: on-failure

  pong_project_db:
    image: postgres:16-bookworm
    volumes:
      - pong_project_db:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: pong_project_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: yourpassword
    networks:
      - pong_project
    restart: on-failure

  authentification:
    build:
      context: ./Micro-Services/authentification
      dockerfile: Dockerfile
    environment:
      - HOST_IP=${HOST_IP}
    volumes:
      - ./Micro-Services/authentification:/app
    ports:
      - "8002:8000"
    networks:
      - auth
    depends_on:
      - authentification_db
    restart: on-failure


  authentification_db:
    image: postgres:16-bookworm
    volumes:
      - auth_db:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: authentification_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: yourpassword
    networks:
      - auth
    ports:
      - 5432
    restart: on-failure

  game_app:
    build:
      context: ./Micro-Services/game_app
      dockerfile: Dockerfile
    volumes:
      - ./Micro-Services/game_app:/app
    ports:
      - "8003:8000"
    networks:
      - game_app
    depends_on:
      - game_app_db
    restart: on-failure


  game_app_db:
    image: postgres:16-bookworm
    volumes:
      - game_app_db:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: game_app_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: yourpassword
    networks:
      - game_app
    restart: on-failure

  prometheus:
    build:
      context: ./Micro-Services/DevOps/Prometheus
      dockerfile: Dockerfile
    environment:
      - HOST_IP=${HOST_IP}
    volumes:
      - ./Micro-Services/DevOps/Prometheus/prometheus.template.yml:/etc/prometheus/prometheus.template.yml
    ports:
     - "9090:9090"
    networks:
    - pong_project
    - auth
    - game_app
    restart: on-failure

  grafana:
    build:
      context: ./Micro-Services/DevOps/Grafana
      dockerfile: Dockerfile
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./Micro-Services/DevOps/Grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./Micro-Services/DevOps/Grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./Micro-Services/DevOps/Grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - HOST_IP=${HOST_IP}
      - GF_SECURITY_ADMIN_PASSWORD=yourpassword
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/config.json
    ports:
      - "3000:3000"
    networks:
    - pong_project
    - auth
    - game_app
    restart: on-failure

  node_exporter:
    image: prom/node-exporter
    ports:
      - "9100:9100"
    volumes:
      - "/proc:/host/proc:ro"
      - "/sys:/host/sys:ro"
      - "/:/rootfs:ro"
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points'
      - '^/(sys|proc|dev|host|etc)($$|/)'

volumes:
  auth_db:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: $AUTH_DB_VOL

  game_app_db:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: $GAME_APP_DB_VOL

  pong_project_db:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: $PONG_PROJECT_DB_VOL

  grafana-storage:

  prometheus-storage:


networks:
  pong_project:
    driver: bridge
  auth:
    driver: bridge
  game_app:
    driver: bridge