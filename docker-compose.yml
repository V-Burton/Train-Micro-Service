version: '3'

services:
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/certs:/etc/nginx/certs
    ports:
      - '80:80'
      - '443:443'
    depends_on:
      - website
    command: /bin/bash -c "rm -f /etc/nginx/sites-enabled/default && 
              rm -f /etc/nginx/sites-available/default && nginx -g 'daemon off;'"

  main:
    build:
      context: ./Micro-Services/main/src
      dockerfile: Dockerfile
    environment:
      - HOST_IP=${HOST_IP}
    volumes:
      - ./Micro-Services/main/src:/app
    ports:
      - "8001:8000"
    networks:
      - main
    depends_on:
      - main_db
    restart: on-failure

  main_db:
    image: postgres:16-bookworm
    volumes:
      - main_db:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: main_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: yourpassword
    networks:
      - main
    restart: on-failure

  matchmaking:
    build:
      context: ./Micro-Services/matchmaking/src
      dockerfile: Dockerfile
    environment:
      - HOST_IP=${HOST_IP}
    volumes:
      - ./Micro-Services/matchmaking/src:/app
    ports:
      - "8002:8000"
    networks:
      - auth
    depends_on:
      - matchmaking_db
    restart: on-failure


  matchmaking_db:
    image: postgres:16-bookworm
    volumes:
      - auth_db:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: matchmaking_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: yourpassword
    networks:
      - auth
    ports:
      - 5432
    restart: on-failure


  pong_app:
    build:
      context: ./Micro-Services/pong_app
      dockerfile: Dockerfile
    volumes:
      - ./Micro-Services/pong_app:/app
    ports:
      - "8003:8000"
    networks:
      - pong_app
    depends_on:
      - pong_app_db
    restart: on-failure


  pong_app_db:
    image: postgres:16-bookworm
    volumes:
      - pong_app_db:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: pong_app_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: yourpassword
    networks:
      - pong_app
    restart: on-failure

  pong_project:
    build:
      context: ./Micro-Services/pong_project
      dockerfile: Dockerfile
    volumes:
      - ./Micro-Services/pong_project:/app
    ports:
      - "8004:8000"
    networks:
      - pong_project
    depends_on:
      - pong_project_db
    restart: on-failure


  pong_project_db:
    image: postgres:16-bookworm
    volumes:
      - pong_project_db:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: pong_project_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: yourpassword
    networks:
      - pong_project
    restart: on-failure

  tournament:
    build:
      context: ./Micro-Services/tournament
      dockerfile: Dockerfile
    volumes:
      - ./Micro-Services/tournament:/app
    ports:
      - "8005:8000"
    networks:
      - tournament
    depends_on:
      - tournament_db
    restart: on-failure


  tournament_db:
    image: postgres:16-bookworm
    volumes:
      - tournament_db:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: tournament_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: yourpassword
    networks:
      - tournament
    restart: on-failure

  users:
    build:
      context: ./Micro-Services/users
      dockerfile: Dockerfile
    volumes:
      - ./Micro-Services/users:/app
    ports:
      - "8006:8000"
    networks:
      - users
    depends_on:
      - users_db
    restart: on-failure


  users_db:
    image: postgres:16-bookworm
    volumes:
      - users_db:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: users_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: yourpassword
    networks:
      - users
    restart: on-failure

  prometheus:
    build:
      context: ./Micro-Services/DevOps/Prometheus
      dockerfile: Dockerfile
    environment:
      - HOST_IP=${HOST_IP}
    volumes:
      - ./Micro-Services/DevOps/Prometheus/prometheus.template.yml:/etc/prometheus/prometheus.template.yml
    ports:
     - "9090:9090"
    networks:
    - main
    - auth
    restart: on-failure

  grafana:
    build:
      context: ./Micro-Services/DevOps/Grafana
      dockerfile: Dockerfile
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./Micro-Services/DevOps/Grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./Micro-Services/DevOps/Grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./Micro-Services/DevOps/Grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - HOST_IP=${HOST_IP}
      - GF_SECURITY_ADMIN_PASSWORD=yourpassword
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/config.json
    ports:
      - "3000:3000"
    networks:
    - main
    - auth
    restart: on-failure

  node_exporter:
    image: prom/node-exporter
    ports:
      - "9100:9100"
    volumes:
      - "/proc:/host/proc:ro"
      - "/sys:/host/sys:ro"
      - "/:/rootfs:ro"
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points'
      - '^/(sys|proc|dev|host|etc)($$|/)'

volumes:
  main_db:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: $MAIN_DB_VOL

  matchmaking_db:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: $MATCHMAKING_DB_VOL

  pong_app_db:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: $PONG_APP_DB_VOL

  pong_project_db:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: $PONG_PROJECT_DB_VOL

  tournament_db:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: $TOURNAMENT_DB_VOL

  users_db:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: $USERS_DB_VOL

  grafana-storage:

  prometheus-storage:


networks:
  main:
    driver: bridge
  auth:
    driver: bridge
  pong_app:
    driver: bridge
  pong_project:
    driver: bridge
  tournament:
    driver: bridge
